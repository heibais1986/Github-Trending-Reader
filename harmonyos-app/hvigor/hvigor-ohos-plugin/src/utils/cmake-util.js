"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.CmakeArg=exports.CmakeUtil=void 0;const os_1=__importDefault(require("os")),path_1=__importDefault(require("path")),fs_extra_1=__importDefault(require("fs-extra")),build_option_path_info_js_1=require("../common/build-option-path-info.js"),common_const_js_1=require("../const/common-const.js"),code_type_enum_js_1=require("../enum/code-type-enum.js"),generate_codemodel_js_1=require("../model/cxx/generate-codemodel.js"),generate_native_library_js_1=require("../model/cxx/generate-native-library.js"),sdk_version_js_1=require("../version/sdk-version.js"),file_util_js_1=require("./file-util.js"),ohos_logger_js_1=require("./log/ohos-logger.js");class CmakeUtil{static parseLibraries(e,t,r){var a;const i=new generate_codemodel_js_1.GenerateCodemodel(e),s=i.getCodemodel(),o=i.getObjFromIndex("cmakeFiles"),_=new Map;return null===(a=null==s?void 0:s.configurations)||void 0===a||a.flatMap(e=>e.targets).forEach(e=>{const a=generate_native_library_js_1.GenerateNativeLibrary.parseLibrary(r,e,t,o);_.set(e.name,a)}),_}static checkNativeHeader(e,t,r){fs_extra_1.default.existsSync(e)||CmakeUtil._log.printErrorExit("THE_PROPERTY_OF_HEADERPATH_SPECIFIES_DIRECTORY_%S_WHICH_DOES_NOT_EXIST",[e,t.getProfilePath()]),fs_extra_1.default.statSync(e).isFile()&&CmakeUtil._log.printErrorExit("THE_PROPERTY_OF_HEADERPATH_SPECIFIES_DIRECTORY_%S_IS_NOT_DITECTORY",[e,t.getProfilePath()],[[t.getProfilePath()]]);fs_extra_1.default.readdirSync(e).forEach(t=>{r.get(t)&&CmakeUtil._log.printErrorExit("THE_FOLLOWING_PATH_CONTAINS_A_FILE_WITH_THE_SAME_NAME",[t,e,r.get(t)]),r.set(t,e)})}static cleanCache(e){const t=path_1.default.resolve(e,"CMakeCache.txt");file_util_js_1.FileUtil.deleteFile(t)}static getCmakeListDir(e,t,r){const a=e.getProjectDir();if(!r)return path_1.default.resolve(a,"./src/main/cpp");let i=r.path;const s=build_option_path_info_js_1.buildOptionPath.getTargetBuildOptPath(e,t,"path");void 0===i&&(i="./src/main/cpp/CMakeLists.txt"),""===i.trim()&&this._log.printErrorExit("THE_CONFIGURED_CMAKE_SCRIPT_IN_EXTERNALNATIVEOPTIONS_PATH_CAN_NOT_BE_EMPTY",[s]);const o=path_1.default.resolve(a,i);return fs_extra_1.default.existsSync(o)||this._log.printErrorExit("THE_CONFIGURED_CMAKE_SCRIPT_IN_EXTERNALNATIVEOPTIONS_PATH_DOES_NOT_EXIST",[s]),"CMakeLists.txt"!==path_1.default.basename(o)&&this._log.printErrorExit("THE_CONFIGURED_CMAKE_SCRIPT_NAME_%S_SHOULD_BE_CMAKELISTSTXT",[path_1.default.basename(o),s]),path_1.default.resolve(a,i,"..")}static resolveArch(e,t,r){if(e.indexOf(this.ARCH_X86_64)>-1)return;const a=t?this.OHOS_MIN_NDK_FOR_X86_64:this.HOS_MIN_NDK_FOR_X86_64;(r.equals(a)||r.isHigherThan(a))&&e.push(this.ARCH_X86_64)}static getMayBeOccurErrorsFilePath(e){return[e.getProfilePath()," If there are no issues in this file, perhaps you have used 'overrides' in 'hvigorfile.ts', please check it."].join(`${os_1.default.EOL}\t`)}static checkAbiFilters(e,t,r,a){return t&&(null==e?void 0:e.includes("armeabi-v7a"))?this._log.printErrorExit("ARMEABIV7A_NOT_SUPPORTED_FORHARMONYOS",[build_option_path_info_js_1.buildOptionPath.getTargetBuildOptPath(r,a,"abiFilters")]):t||1!==(null==e?void 0:e.length)||"armeabi-v7a"!==e[0]||this._log.printErrorExit("ARMEABIV7A_NOT_SUPPORTED_OPENHARMONY_AS_THE_ONLY_OPTION",[build_option_path_info_js_1.buildOptionPath.getTargetBuildOptPath(r,a,"abiFilters")]),e&&e.length>0?e:["arm64-v8a"]}static nativeTaskCondition(e,t,r){if(void 0===r)return!1;const a=t.getTargetName();let i=e.getSourceSetByTargetName(a);if(a===common_const_js_1.DefaultTargetConst.OHOS_TEST_TARGET){if(!e.isHarModule())return!1;i=e.getSourceSetByTargetName(common_const_js_1.DefaultTargetConst.DEFAULT_TARGET)}return i.getCodeMap().has(code_type_enum_js_1.CodeType.CPP)}static mergeCommandLine(e,t){const r=CmakeUtil.parseCmakeArgs(t,void 0);return CmakeUtil.parseCmakeArgs(e,r),CmakeUtil.toCommandLine(r,e)}static toCommandLine(e,t){const r=[t[0]];return e.forEach(e=>r.push(CmakeUtil.assembleArg(e))),r}static parseCmakeArgs(e,t){return t=t||new Map,e.forEach(e=>{const r=CmakeUtil.parseArg(e.trim());if(void 0!==r){const e=r.getPrefix()+r.getKey();t.has(e)||t.set(e,r)}}),t}static parseStlFromCMakeCache(e){var t;const r={name:"OHOS_STL",value:"c++_shared",type:"STRING"},a=new generate_codemodel_js_1.GenerateCodemodel(e).getObjFromIndex("cache");return a&&null!==(t=a.entries.find(e=>"OHOS_STL"===e.name))&&void 0!==t?t:r}static getCMakeArguments(e){return e?"string"==typeof e?[...e.trim().split(" ").filter(e=>e.startsWith("-"))]:[...e].flatMap(e=>e.trim().split(" ")).filter(e=>e.startsWith("-")):[]}static parseArg(e){if(!e.startsWith("-"))return;const t=e.substring(0,2),r=e.substring(2),a=r.indexOf("=");if(-1===a)return new CmakeArg(t,r,void 0);{const e=r.substring(0,a).trim(),i=r.substring(a+1).trim();return new CmakeArg(t,e,i)}}static getHarExtraParams(e){var t,r,a;const i={compatibleSdkVersion:e.targetData.getCompatibleApiVersion(),compatibleSdkType:e.targetData.isHarmonyOS()?"HarmonyOS":"OpenHarmony",obfuscated:e._harExtendInfo.isObfuscatedHar(),nativeComponents:[]};if(!e.hasNativeOption)return delete i.nativeComponents,i;const s=null===(r=null===(t=e.targetService.getBuildOption())||void 0===t?void 0:t.nativeLib)||void 0===r?void 0:r.librariesInfo,o=new Map;if(s&&s.length>0)for(const e of s)o.set(e.name,e.linkLibraries);return null===(a=CmakeUtil.getCppSoName(e))||void 0===a||a.forEach(t=>{var r,a;const s={name:t,compatibleSdkVersion:e.targetData.getCompatibleApiVersion(),compatibleSdkType:e.targetData.isHarmonyOS()?"HarmonyOS":"OpenHarmony",linkLibraries:null!==(r=o.get(t))&&void 0!==r?r:[]};null===(a=i.nativeComponents)||void 0===a||a.push(s)}),i}static getCppSoName(e){var t;if(e.hasNativeOption&&void 0!==e.cmakeListDir){const r=new Set,a=CmakeUtil.checkAbiFilters(null===(t=e.targetService.getBuildOption().externalNativeOptions)||void 0===t?void 0:t.abiFilters,e.targetData.isHarmonyOS(),e.moduleModel,e.targetName);for(const t of a){const a=path_1.default.resolve(e.pathInfo.getNinjaWorkDir(),t);CmakeUtil.parseLibraries(a,e.targetName,t).forEach(e=>{e.getNameOnDisk()&&r.add(e.getNameOnDisk())})}return r}}static assembleArg(e){return void 0===e.getValue()?e.getPrefix()+e.getKey():`${e.getPrefix()+e.getKey()}=${e.getValue()}`}static mkCodeModelRequest(e){fs_extra_1.default.mkdirSync(path_1.default.resolve(e,".cmake","api","v1","query","codemodel-v2"),{recursive:!0}),fs_extra_1.default.mkdirSync(path_1.default.resolve(e,".cmake","api","v1","query","cmakeFiles-v1"),{recursive:!0}),fs_extra_1.default.mkdirSync(path_1.default.resolve(e,".cmake","api","v1","query","cache-v2"),{recursive:!0})}}exports.CmakeUtil=CmakeUtil,CmakeUtil._log=ohos_logger_js_1.OhosLogger.getLogger("Cmake"),CmakeUtil._nativeCacheDir=path_1.default.resolve(process.cwd(),".hvigor","cache"),CmakeUtil.ARCH_X86_64="x86_64",CmakeUtil.OHOS_MIN_NDK_FOR_X86_64=new sdk_version_js_1.SdkVersion("3.2.10.6"),CmakeUtil.HOS_MIN_NDK_FOR_X86_64=new sdk_version_js_1.SdkVersion("3.2.2.6");class CmakeArg{constructor(e,t,r){this._prefix=e,this._key=t,this._value=r}getPrefix(){return this._prefix}setPrefix(e){this._prefix=e}getKey(){return this._key}setKey(e){this._key=e}getValue(){return this._value}setValue(e){this._value=e}}exports.CmakeArg=CmakeArg;