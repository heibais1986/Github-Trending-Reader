"use strict";var __importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,"__esModule",{value:!0}),exports.BuildNativeWithCmake=void 0;const os_1=__importDefault(require("os")),path_1=__importDefault(require("path")),hvigor_1=require("@ohos/hvigor"),fs_extra_1=__importDefault(require("fs-extra")),native_command_builder_js_1=require("../builder/native-command-builder.js"),ohos_trace_js_1=require("../common/trace/ohos-trace.js"),common_const_js_1=require("../const/common-const.js"),sdk_const_js_1=require("../const/sdk-const.js"),hvigor_native_build_js_1=require("../model/cxx/hvigor-native-build.js"),cmake_invalidation_state_js_1=require("../utils/cmake-invalidation-state.js"),cmake_util_js_1=require("../utils/cmake-util.js"),file_util_js_1=require("../utils/file-util.js"),ohos_logger_js_1=require("../utils/log/ohos-logger.js"),abstract_build_native_js_1=require("./abstract-build-native.js"),task_names_js_1=require("./common/task-names.js"),legacy_pre_build_js_1=require("./legacy-tasks/legacy-pre-build.js"),pre_build_js_1=require("./pre-build.js");var Task=task_names_js_1.TaskNames.Task;class BuildNativeWithCmake extends abstract_build_native_js_1.AbstractBuildNative{constructor(e){super(e,Task.BUILD_NATIVE_WITH_CMAKE),this._log=ohos_logger_js_1.OhosLogger.getLogger(BuildNativeWithCmake.name),this._moduleDir=this.moduleModel.getProjectDir()}initTaskDepends(){this.declareDepends(this.isFaMode?legacy_pre_build_js_1.LegacyPreBuild.name:pre_build_js_1.PreBuild.name)}taskShouldDo(){return cmake_util_js_1.CmakeUtil.nativeTaskCondition(this.moduleModel,this.targetData,this._nativeOption)}async doTaskAction(){var e;if(file_util_js_1.FileUtil.checkDirWithoutDelete(this.pathInfo.getModuleBuildPath()),file_util_js_1.FileUtil.checkDirWithoutDelete(this.pathInfo.getCppOutputDir()),void 0!==this._nativeOption){let e=this._nativeOption.path;void 0===e&&(e="./src/main/cpp/CMakeLists.txt",this._log.warn(`The path of the cmake script in externalNativeOptions is empty. Use the default path ${e}.`))}const t=cmake_util_js_1.CmakeUtil.checkAbiFilters(null===(e=this._nativeOption)||void 0===e?void 0:e.abiFilters,this.targetData.isHarmonyOS(),this.moduleModel,this.targetName);for(const e of t){const t=`generate CMake command with ABI of ${e}`,i=this.durationEvent.createSubEvent(t,"");i.start();const a=path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),e),s=this.buildCommand(e),o=path_1.default.resolve(a,"metadata_generation_command.txt"),n=s.join(os_1.default.EOL);if(fs_extra_1.default.existsSync(o)){await fs_extra_1.default.readFile(o,{encoding:"utf-8"})!==n&&await fs_extra_1.default.writeFile(o,n)}else await fs_extra_1.default.mkdir(path_1.default.dirname(o),{recursive:!0}),await fs_extra_1.default.writeFile(o,n);i.stop(),i.setLog(t,hvigor_1.MetricLogType.INFO);const l=`submit CMake task to work pool with ABI of ${e}`,r=this.durationEvent.createSubEvent(l,"");r.start();const _=path_1.default.resolve(a,"configure_fingerprint.json"),d=await(0,cmake_invalidation_state_js_1.createInvalidationState)(cmake_invalidation_state_js_1.FileId.getInstance(_),await this.getInputFiles(a,e),this.getRequiredOutputFiles(a),this.getOptionalOutputFiles(a),this.getHardOutputFiles(a)),u=d.shouldConfigure();if(ohos_trace_js_1.ohosTrace.traceIncrement(this.moduleName,"BUILD_NATIVE_WITH_CMAKE",!u),u){d.softConfigureOkay()||(this._log.debug("Clean CMakeCache.txt due to outdated CMake configuration."),await fs_extra_1.default.rm(path_1.default.resolve(a,"CMakeCache.txt"),{recursive:!0,force:!0}));const t=async()=>{var t,i;const s=(0,cmake_invalidation_state_js_1.readCMakeFileApiReply)(a,this.targetName,e,this.sdkInfo.getCmakeTool()),o=null!==(i=null===(t=s.extra)||void 0===t?void 0:t.join(os_1.default.EOL))&&void 0!==i?i:"";await fs_extra_1.default.writeFile(path_1.default.resolve(a,"additional_project_files.txt"),o),await fs_extra_1.default.writeFile(path_1.default.resolve(a,"native_work_dir.txt"),a),await fs_extra_1.default.writeFile(path_1.default.resolve(a,"build_file_index.txt"),s.buildFiles.join(os_1.default.EOL)),delete s.extra,await fs_extra_1.default.writeJSON(path_1.default.resolve(a,hvigor_native_build_js_1.HvigorNativeConfigFile),s),d.addInputFiles(await this.getInputFiles(a,e)),await d.updateFingerPrint(),r.stop(),r.setLog(l,hvigor_1.MetricLogType.INFO)};d.shouldConfigureMessages().forEach(e=>this._log.debug(e)),cmake_util_js_1.CmakeUtil.mkCodeModelRequest(a),await this.executeCommand(s,a,t,[],r)}else this._log.debug("CMake configuration was up-to-date"),await d.updateFingerPrint(),r.stop(),r.setLog(l,hvigor_1.MetricLogType.INFO)}}async getInputFiles(e,t){const i=new Set;i.add(path_1.default.resolve(cmake_util_js_1.CmakeUtil.getCmakeListDir(this.moduleModel,this.targetName,this._nativeOption),"CMakeLists.txt")),file_util_js_1.FileUtil.getAllFilesFromFolder(path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),"hvigor",t)).forEach(e=>i.add(e));const a=path_1.default.resolve(e,hvigor_native_build_js_1.HvigorNativeConfigFile);if(!fs_extra_1.default.existsSync(a))return[...i].map(e=>cmake_invalidation_state_js_1.FileId.getInstance(e));const s=await(0,hvigor_native_build_js_1.readHvigorNativeConfigFile)(a);return null==s||s.buildFiles.forEach(e=>i.add(e)),[...i].map(e=>cmake_invalidation_state_js_1.FileId.getInstance(e))}getOptionalOutputFiles(e){return[path_1.default.resolve(e,"build.ninja"),path_1.default.resolve(e,"compile_commands.json"),path_1.default.resolve(e,"native_work_dir.txt"),path_1.default.resolve(e,"build_file_index.txt"),path_1.default.resolve(e,"additional_project_files.txt")].map(e=>cmake_invalidation_state_js_1.FileId.getInstance(e))}getRequiredOutputFiles(e){return[path_1.default.resolve(e,hvigor_native_build_js_1.HvigorNativeConfigFile),path_1.default.resolve(e,"CMakeCache.txt")].map(e=>cmake_invalidation_state_js_1.FileId.getInstance(e))}getHardOutputFiles(e){return[path_1.default.resolve(e,"metadata_generation_command.txt")].map(e=>cmake_invalidation_state_js_1.FileId.getInstance(e))}getToolchainFile(e,t){let i="";return e===common_const_js_1.CommonConst.BISHENG?(t||this._log.warn("Unknown compiler BiSheng, The runtimeOS that supports the BiSheng can only be HarmonyOS"),i=t?this.sdkInfo.getHmsBiShengToolchainFile():this.sdkInfo.getNativeToolchain()):i=t?this.sdkInfo.getHmsToolchainFile():this.sdkInfo.getNativeToolchain(),fs_extra_1.default.existsSync(i)||(this._log.warn(`Cannot find the file under the specified path ${i}`),i=fs_extra_1.default.existsSync(this.sdkInfo.getHmsToolchainFile())?this.sdkInfo.getHmsToolchainFile():this.sdkInfo.getNativeToolchain()),i}buildCommand(e){var t,i,a;const s=new native_command_builder_js_1.NativeCommandBuilder(this.sdkInfo.getCmakeTool()),o=path_1.default.resolve(this.pathInfo.getIntermediatesCppOutPut(),e),n=path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),e),l=path_1.default.resolve(this.pathInfo.getNinjaWorkDir(),"hvigor",e),r=this.targetService.getBuildMode(),_=this.targetData.isHarmonyOS()&&this.compileApiVersion>9,d=null===(t=this.targetService.getBuildOption())||void 0===t?void 0:t.nativeCompiler,u=this.getToolchainFile(d,_);s.addCmakeList(cmake_util_js_1.CmakeUtil.getCmakeListDir(this.moduleModel,this.targetName,this._nativeOption)).addTempFilePath(n).addOhosArch(e).addOutputDir(o).addBuildType(r).addNativeSdk(this.sdkInfo.getSdkNativeDir()).addSystemName("OHOS").addOhosArchAbi(e).exportCompileCommands("ON").addToolChain(u).addGenerator("Ninja").addMakeProgramPath(this.sdkInfo.getNativeNinjaTool()).addCMakeFindPath(l).addPackageFindScript(path_1.default.resolve(l,common_const_js_1.NativeConst.PACKAGE_SUMMARY_FILE)).muteUnusedCliWarn();const h=null===(i=this._nativeOption)||void 0===i?void 0:i.cFlags,c=null===(a=this._nativeOption)||void 0===a?void 0:a.cppFlags;h&&""!==h.trim()&&s.addCFlags(h),c&&""!==c.trim()&&s.addCxxFlags(c),_&&s.addHMosNativeSdk(this.sdkInfo.getHmsNativeDir());const m=this.addNativeArgs(e);let g=s.build();return g=cmake_util_js_1.CmakeUtil.mergeCommandLine(g,m),this._log._printDebugCommand("Cmake",g),g}addNativeArgs(e){var t;const i=cmake_util_js_1.CmakeUtil.getCMakeArguments(null===(t=this._nativeOption)||void 0===t?void 0:t.arguments);new Map([["ohos-debug-asan","-DOHOS_ENABLE_ASAN=ON"],["ohos-enable-tsan","-DOHOS_ENABLE_TSAN=ON"],["ohos-enable-hwasan","-DOHOS_ENABLE_HWASAN=ON"],["ohos-enable-ubsan","-DOHOS_ENABLE_UBSAN=ON"]]).forEach((t,a)=>{if("ohos-enable-hwasan"===a&&"arm64-v8a"!==e)return;"true"===hvigor_1.hvigorCore.getExtraConfig().get(a)&&i.push(t)});const a=i.flatMap(e=>e.trim().split(" "));return this.checkSanArgsSupported(a),this.checkExclusiveSan(a),a}checkSanArgsSupported(e){const t=this.targetData.getApiMeta();e.includes("-DOHOS_ENABLE_ASAN=ON")&&t.compatibleSdkVersion.version<=sdk_const_js_1.ApiVersion.API_VERSION_9&&this._log.warn("To use ASan, first upgrade the SDK to API version 10 or later.");e.some(e=>BuildNativeWithCmake.sanAbilitySet.has(e)&&"-DOHOS_ENABLE_ASAN=ON"!==e)&&t.compatibleSdkVersion.version<=sdk_const_js_1.ApiVersion.API_VERSION_11&&this._log.warn("To use TSan, HWASan, or UBSan, first upgrade the SDK to API version 12 or later.")}checkExclusiveSan(e){new Set(e.filter(e=>BuildNativeWithCmake.sanAbilitySet.has(e))).size>1&&this._log.warn("Sanitizers are mutually exclusive. Enable only one of them, such as ASan, TSan, HWASan, or UBSan, when using CMake.")}}exports.BuildNativeWithCmake=BuildNativeWithCmake,BuildNativeWithCmake.sanAbilitySet=new Set(["-DOHOS_ENABLE_ASAN=ON","-DOHOS_ENABLE_TSAN=ON","-DOHOS_ENABLE_HWASAN=ON","-DOHOS_ENABLE_UBSAN=ON"]);